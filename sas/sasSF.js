/**
 * 현대카드 ID로그인 암호화처리.
 */
var sasSF = function(keypad) {
	this.keyData    	= "4D6F62696C655472616E734B65793130";
	this.keyType    	= 2; //plain text
	this.keypadType 	= 1; //1 : qwerty 2: number pad
	this.encodeType 	= 2; //0 : base64 1: HexString 2:plain
	this.IV 			= "4D6F62696C655472616E734B65793130";  //iv 16byte HexString
	this.retData    	= ""; 

	if (keypad != undefined && (keypad > 0 && keypad <3)) {
		this.keypadType = keypad;
	}

	this.origin1 = {
					"1":"06010000000000000000000000000000",
					"2":"06020000000000000000000000000000",
					"3":"06030000000000000000000000000000",
					"4":"06040000000000000000000000000000",
					"5":"06050000000000000000000000000000",
					"6":"06060000000000000000000000000000",
					"7":"06070000000000000000000000000000",
					"8":"06080000000000000000000000000000",
					"9":"06090000000000000000000000000000",
					"0":"060A0000000000000000000000000000",
					"q":"060B0000000000000000000000000000",
					"w":"060C0000000000000000000000000000",
					"e":"060D0000000000000000000000000000",
					"r":"060E0000000000000000000000000000",
					"t":"060F0000000000000000000000000000",
					"y":"06100000000000000000000000000000",
					"u":"06110000000000000000000000000000",
					"i":"06120000000000000000000000000000",
					"o":"06130000000000000000000000000000",
					"p":"06140000000000000000000000000000",
					"a":"06150000000000000000000000000000",
					"s":"06160000000000000000000000000000",
					"d":"06170000000000000000000000000000",
					"f":"06180000000000000000000000000000",
					"g":"06190000000000000000000000000000",
					"h":"061A0000000000000000000000000000",
					"j":"061B0000000000000000000000000000",
					"k":"061C0000000000000000000000000000",
					"l":"061D0000000000000000000000000000",
					"z":"061E0000000000000000000000000000",
					"x":"061F0000000000000000000000000000",
					"c":"06200000000000000000000000000000",
					"v":"06210000000000000000000000000000",
					"b":"06220000000000000000000000000000",
					"n":"06230000000000000000000000000000",
					"m":"06240000000000000000000000000000",
					" ":"06250000000000000000000000000000",
					"Q":"070B0000000000000000000000000000",
					"W":"070C0000000000000000000000000000",
					"E":"070D0000000000000000000000000000",
					"R":"070E0000000000000000000000000000",
					"T":"070F0000000000000000000000000000",
					"Y":"07100000000000000000000000000000",
					"U":"07110000000000000000000000000000",
					"I":"07120000000000000000000000000000",
					"O":"07130000000000000000000000000000",
					"P":"07140000000000000000000000000000",
					"A":"07150000000000000000000000000000",
					"S":"07160000000000000000000000000000",
					"D":"07170000000000000000000000000000",
					"F":"07180000000000000000000000000000",
					"G":"07190000000000000000000000000000",
					"H":"071A0000000000000000000000000000",
					"J":"071B0000000000000000000000000000",
					"K":"071C0000000000000000000000000000",
					"L":"071D0000000000000000000000000000",
					"Z":"071E0000000000000000000000000000",
					"X":"071F0000000000000000000000000000",
					"C":"07200000000000000000000000000000",
					"V":"07210000000000000000000000000000",
					"B":"07220000000000000000000000000000",
					"N":"07230000000000000000000000000000",
					"M":"07240000000000000000000000000000",
					"!":"0A010000000000000000000000000000",
					"@":"0A020000000000000000000000000000",
					"#":"0A030000000000000000000000000000",
					"$":"0A040000000000000000000000000000",
					"%":"0A050000000000000000000000000000",
					"^":"0A060000000000000000000000000000",
					"&":"0A070000000000000000000000000000",
					"*":"0A080000000000000000000000000000",
					"(":"0A090000000000000000000000000000",
					")":"0A0A0000000000000000000000000000",
					"`":"0A0B0000000000000000000000000000",
					"-":"0A0C0000000000000000000000000000",
					"=":"0A0D0000000000000000000000000000",
				   "\\":"0A0E0000000000000000000000000000",
					"[":"0A0F0000000000000000000000000000",
					"]":"0A100000000000000000000000000000",
					";":"0A110000000000000000000000000000",
					"'":"0A120000000000000000000000000000",
					",":"0A130000000000000000000000000000",
					".":"0A140000000000000000000000000000",
					"/":"0A150000000000000000000000000000",
					"~":"0A160000000000000000000000000000",
					"_":"0A170000000000000000000000000000",
					"+":"0A180000000000000000000000000000",
					"|":"0A190000000000000000000000000000",
					"{":"0A1A0000000000000000000000000000",
					"}":"0A1B0000000000000000000000000000",
					":":"0A1C0000000000000000000000000000",
				   "\"":"0A1D0000000000000000000000000000",
					"<":"0A1E0000000000000000000000000000",
					">":"0A1F0000000000000000000000000000",
					"?":"0A200000000000000000000000000000"
	};

	this.origin2 = {
                    "1"	:"05010000000000000000000000000000",
                    "2"	:"05020000000000000000000000000000",
                    "3"	:"05030000000000000000000000000000",
                    "4"	:"05040000000000000000000000000000",
                    "5"	:"05050000000000000000000000000000",
                    "6"	:"05060000000000000000000000000000",
                    "7"	:"05070000000000000000000000000000",
                    "8"	:"05080000000000000000000000000000",
                    "9"	:"05090000000000000000000000000000",
                	"0"	:"050A0000000000000000000000000000"
	};
	
}

sasSF.prototype.encKeypad = function(plaintext, outtype) {
	if (typeof plaintext === undefined)
		return "";

	if (this.keydata === "")
		return "";
		
	this.retData = "";	
	var originData = "origin"+ this.keypadType;
	var key      = CryptoJS.enc.Hex.parse(this.keyData);
    var iv       = CryptoJS.enc.Hex.parse(this.IV);
		
	for (var i=0; i<plaintext.length; i++) {
		switch (this.keypadType)  {
			case 2 :
				var check = plaintext.charAt(i).search(/[0-9]/i);
				if (check != 0) {
					this.retData = "";
					return this.retData;
				}
				break;
		}
		this.retData += CryptoJS.SEED.encrypt(CryptoJS.enc.Hex.parse(this[originData][plaintext.charAt(i)]), key, {iv:iv, mode:CryptoJS.mode.CBC, padding:{pad: function(){}, unpad: function(){}}}).ciphertext.toString();
	}

	return this.retData;
}

sasSF.prototype.setKeyData = function(plainkey, keytype) {
    this.keyData = plainkey;
    this.keyType = keytype;
    this.initInclude();
}

sasSF.prototype.initInclude = function() {
    try {
        system.include("sas/seed");
    } catch (e) {
        console.log("Exception system.include(seed) :[" + e.message + "]");
    }
}

sasSF.prototype.setKeyboardType = function(keypad) {
	if (keypad > 0 && keypad <3) {
		this.keypadType = keypad; //1 : qwerty 2: number pad
	}
}

sasSF.prototype.cleanData = function() {
	this.retData = "";
}